#include "push_swap.h"
#include "push_swap.h"

int sort_3_a2_small(t_stacks *s, int as, int *arr)
{
	if (arr[as - 2] < arr[as - 1] && arr[as - 1] < arr[as - 3])
		operate("sa", s->a, s->b, 0);
	else if (arr[as - 2] < arr[as - 3] && arr[as - 3] < arr[as - 1])
	{
		operate("rra", s->a, s->b, 0);
		operate("rra", s->a, s->b, 0);
	}
	else if (arr[as - 1] < arr[as - 3] && arr[as - 3] < arr[as - 2])
	{
		operate("sa", s->a, s->b, 0);
		operate("ra", s->a, s->b, 0);
	}
	return (0);
}

int sort_3_a1_small(t_stacks *s, int as, int *arr)
{
	if (arr[as - 3] < arr[as - 2] && arr[as - 2] < arr[as - 1])
	{
		operate("sa", s->a, s->b, 0);
		operate("rra", s->a, s->b, 0);
	}
	else if (arr[as - 1] < arr[as - 2] && arr[as - 2] < arr[as - 3])
		return (0);
	else if (arr[as - 3] < arr[as - 1] && arr[as - 1] < arr[as - 2])
		operate("rra", s->a, s->b, 0);
	else
		return (sort_3_a2_small(s, as, arr));
	return (0);
}

int sort_small(t_stacks *s, int part_size)
{
	if (part_size <= 1)
		return (0);
	if (part_size == 2 && stack_peek(s->a) > s->a->data[s->a->size - 2])
		operate("sa", s->a, s->b, 0);
	if (part_size == 3)
		sort_3_a1_small(s, s->a->size, s->a->data);
	return (0);
}

int	find_min(t_stack *s)
{
	long min;
	size_t i;

	min = 2147483648;
	i = -1;
	while (++i < s->size)
	{
		if (s->data[i] < min)
			min = s->data[i];
	}
	return (min);
}

int	ra_or_rra(t_stack *s, int a)
{
	size_t i;

	i = -1;
	while (s->data[++i] != a)
		continue ;
	if (i <= s->size / 2)
		return (0);
	else
		return (1);
}
int	sort_medium(t_stacks *s, int part_size)
{
	int min;
	int t;

	if (part_size <= 3) {
		sort_small(s, part_size);
		operate("pa", s->a, s->b, 0);
		operate("pa", s->a, s->b, 0);
		return (0);
	}
	min = find_min(s->a);
	t = ra_or_rra(s->a, min);
	while (stack_peek(s->a) != min)
		operate(t ? "ra" : "rra", s->a, s->b, 0);
	operate("pb", s->a, s->b, 0);
	return (sort_medium(s, part_size - 1));
}

static int	is_sorted(t_stack *s)
{
	size_t	i;

	i = -1;
	while (++i < s->size - 1)
		if (s->data[i] < s->data[i + 1])
			return (0);
	return (1);
}

int	main(int argc, char **argv)
{
	t_stack a;
	t_stack b;
	t_stack b_parts;
	t_stack a_parts;
	t_stacks s;

	if (argc < 2)
		return (1);
	if (!stack_from_source(&a, ++argv, argc - 1))
	{
		ft_printf("Error\n");
		return (0);
	}
	stack_from_source(&b, 0, 0);
	stack_from_source(&b_parts, 0, 0);
	stack_from_source(&a_parts, 0, 0);
	s.b = &b;
	s.a_parts = &a_parts;
	s.b_parts = &b_parts;
	s.a = &a;
	if (!is_sorted(&a) && a.size <= 5 && a.size > 3)
		sort_medium(&s, a.size);
	else
		test_sort(&s);
	//for (size_t i = 0; i < a.size; ++i)
	//	printf("%d ", a.data[i]);
	//printf("\n");
	if (a.data)
		free(a.data);
	if (b.data)
		free(b.data);
	if (a_parts.data)
		free(a_parts.data);
	if (b_parts.data)
		free(b_parts.data);
	return (0);
}

